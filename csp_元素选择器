//80分..
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

map<string,int> tran;//tag映射为数 
vector<int> row[100];//row[i]存i对应的tag所在的所有行 
map<string,int> idmap;//idmap[i]表示id为i的元素所在行 
vector<string> level[100];//每层中的id或tag 
int maxL=0;//最大层数 
int index=1; 
struct Element
{
	string s;
	string tag;
	string id;
	int lev;//级数从0开始 
	Element(string a="",string b="",string c="",int d=0)
	{
		s=a;tag=b;id=c;lev=d;
	}
};
vector<string> pos(string s)
{//后代选择器 
	vector<string> li;
	int index=0,i=0,j=1;
	for(;j<s.size();j++)
	{
		if(s[j]==' ')
		{
			li.push_back(s.substr(i,j-i));
			i=j+1;
		}
	}
	li.push_back(s.substr(i,s.size()-i));
	return li;
}
void tran_low(string& s)
{
	for(int i=0;i<s.size();i++)
		s[i]=tolower(s[i]);
}

void ini(Element& t)
{
	int i,j,count=0;
	for(i=0;i<t.s.size();i++)
	{
		if(t.s[i]=='.') count++;
		if(t.s[i]!='.') break;
	}
	for(j=i+1;j<t.s.size();j++)
	{
		if(t.s[j]=='#') break;
	}
	t.lev=count/2;
	if(t.lev>maxL) maxL=t.lev;
	t.tag=(j==t.s.size())? t.s.substr(i,t.s.size()-i):t.s.substr(i,j-i-1);
	if(t.tag[t.tag.size()-1]==' ') t.tag=t.tag.substr(0,t.tag.size()-1);
	tran_low(t.tag);
	t.id=(j==t.s.size())? "":t.s.substr(j+1,t.s.size()-j);
	level[t.lev].push_back(t.tag);
	if(t.id!="") level[t.lev].push_back(t.id);
	
}
bool contain(vector<string>& l,string s)
{
	for(int i=0;i<l.size();i++)
		if(l[i]==s) return true;
	return false;
}


int main()
{
	freopen("c2.in","r",stdin);
	int n,m;
	cin>>n>>m;	
	Element cin_s[n];
	string select[m],non;
	getline(cin,non);//m n所在的空行无用 
	for(int i=0;i<n;i++)
		getline(cin,cin_s[i].s);
	for(int i=0;i<m;i++)
		getline(cin,select[i]);

	for(int i=0;i<n;i++)
	{
		ini(cin_s[i]); 
		if(tran[cin_s[i].tag]==0)
		{
			tran[cin_s[i].tag]=index++;
		}
		//cout<<"tag:  "<<cin_s[i].tag<<" tran[tag]: "<<tran[cin_s[i].tag]<<endl;
		row[tran[cin_s[i].tag]].push_back(i+1);//行数从1开始计数 
		if(cin_s[i].id!="")
			idmap[cin_s[i].id]=i+1;
	}
	//cout<<contain(level[3],"div ")<<endl;
	
	for(int i=0;i<m;i++) 
	{
		if(select[i][0]=='#')
		{//id选择器 
			string the_id=select[i].substr(1,select[i].size()-1);
			if(idmap[the_id]!=0)
			cout<<1<<" "<<idmap[the_id]<<endl;
			else cout<<0<<endl;
		}
		else 
		{	
			bool tag=true;
			for(int k=0;k<select[i].size();k++)
				if(select[i][k]==' ')tag=false;
			if(tag)
			{//tag选择器 
				tran_low(select[i]);
				if(tran[select[i]]==0)
				{
					cout<<0<<endl;
					continue;
				}
				int x=row[tran[ select[i] ] ].size();
				int t=tran[select[i]];
				cout<<x<<" ";
				for(int j=0;j<x;j++)
					cout<<row[t][j]<<" ";
				cout<<endl;
			}
			else
			{//后代选择器 
				bool pre=true;
				int curr=0,xi;
				vector<string> li=pos(select[i]);
				for(int k=0;k<li.size()-1;k++)
				{//
					if(li[k][0]=='#')
					{//id选择器
						string the_id=li[k].substr(1,li[k].size()-1);
						for(xi=curr;xi<=maxL;xi++)
						{
							if(contain(level[xi],the_id))
							{	
								curr=xi+1;
								break;
							}
						}
						if(xi==maxL+1)
						{
							cout<<0<<endl;
							pre=false;
							break;
						}
					}
					else
					{//tag选择器 
						for(xi=curr;xi<=maxL;xi++)
						{
							if(contain(level[xi],li[k]))
							{
								curr=xi+1;
								break;
							}
						}
						if(xi==maxL+1)
						{
							cout<<0<<endl;
							pre=false;
							break;
						}						
					}
				}
				if(!pre) continue;
				string last=li[li.size()-1];
				if(last[0]=='#')
				{//最后为id选择 
					int therow=idmap[last.substr(1,last.size()-1)];
					//cout<<"therow: "<<therow<<" curr: "<<curr<<endl;
					if(therow-1<curr) cout<<0<<endl;
					else cout<<1<<" "<<therow<<endl;
				}
				else
				{//最后为tag选择 
					//cout<<"curr: "<<curr<<endl;
					tran_low(last);
					queue<int> q;
					int lastr=tran[last];
					if(lastr==0) cout<<0<<endl;
					else
					{
						for(int xi=0;xi<row[lastr].size();xi++)
						{
							int	xrow=cin_s[ row[lastr][xi]-1 ].lev;
							if(xrow>=curr) q.push(row[lastr][xi]);
						}
					
					cout<<q.size()<<" ";
					while(!q.empty())
					{
						cout<<q.front()<<" ";
						q.pop();
					}
					cout<<endl;
					}
				}
			 } 
		}
	}
	return 0;
}
