#include<bits/stdc++.h> 
using namespace std;
typedef long long ll;
const int N=10001;
vector<int>g1[N],g2[N];//g2表示原图的反图 
int vis[N],sccno[N],scc_curr=0;//sccno[i]表示点i所在的连通分支序号
stack<int> s;
void dfs1(int u)
{
	if(vis[u]) return ;
	vis[u]=1;
	for(int i=0;i<g1[u].size();i++)
		dfs1(g1[u][i]);
	s.push(u);
}
void dfs2(int u)
{
	if(sccno[u]) return;
	sccno[u]=scc_curr;
	for(int i=0;i<g2[u].size();i++)
		dfs2(g2[u][i]);
	
}

void kosaraju(int n)
{//kosaraju算法求有向图的连通分量
	for(int i=1;i<=n;i++)
		if(!vis[i]) {
		dfs1(i);	
		}
	for(int i=1;i<=n;i++)
		vis[i]=0;
	
	while(!s.empty())
	{
		int v=s.top();
		s.pop();
		if(!sccno[v])
		{
			scc_curr++;
			dfs2(v);
		}
	}
}

int main()
{
	//freopen("c.in","r",stdin);
	int n,m;
	cin>>n>>m;
	for(int i=1;i<=n;i++)
	{
		vis[i]=0;
		sccno[i]=0;
	}
	
	int u,v;
	for(int i=0;i<m;i++)
	{
		cin>>u>>v;
		g1[u].push_back(v);
		g2[v].push_back(u);
	}
	kosaraju(n);
	
	int count[scc_curr];
	for(int i=1;i<=scc_curr;i++)
		count[i]=0;
	for(int i=1;i<=n;i++)
		count[sccno[i]]++;
	int ans=0;

	for(int i=1;i<=scc_curr;i++)
	{
		int temp=count[i];
		ans+=temp*(temp-1)/2;
	}
	cout<<ans;
	return 0;
	
}
