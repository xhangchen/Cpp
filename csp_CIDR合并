//最后一步同级合并有问题,只有90分
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

struct Ip
{//ip存ip地址的四个字节 
	ll ip[4];
	string s;
	int len;
	Ip(ll a=0,ll b=0,ll c=0,ll d=0,string e="",ll l=0)
	{
		ip[0]=a;ip[1]=b;ip[2]=c;ip[3]=d;s=e;len=0;
	}
};

int getlen(string& s)
{//返回Ip前缀的长度 
	int i;
	int count_point=0;
	for(i=0;i<s.size();i++)
	{
		if(s[i]=='.') count_point++;
		if(s[i]=='/') break;
	}
	int ans;
	if(i!=s.size())
	{
		i++;
		ans=s[i]-'0';
		if(i!=s.size()-1)
		{
			i++;
			ans=ans*10+s[i]-'0';
		}
	}
	else
	{
		if(count_point==0) ans=8;
		else if(count_point==1) ans=16;
		else if(count_point==2) ans=24;
		else ans=32;
	}
	return ans;
}
void ini(Ip& t)
{//将Ip前缀转化为标准型 
	string thes=t.s;
	int i,count_point=0;
	for(i=0;i<t.s.size();i++)
	{
		if(t.s[i]=='.') count_point++;
		if(t.s[i]=='/') break;
	}
	if(i==t.s.size())//无len 
	{
		while(count_point!=3)
		{
			t.s+=".0";
			count_point++;
		}
		t.s+='/'+to_string(getlen(thes));
	}//有len 
	else{
		t.s=t.s.substr(0,i);
		while(count_point!=3)
		{
			t.s+=".0";
			count_point++;
		}
		t.s+='/'+to_string(getlen(thes));
	}
}
void inilen(Ip& t) 
{//已化为标准型后,求len 
	if(t.s[t.s.size()-2]!='/')
		t.len=(t.s[t.s.size()-2]-'0')*10+t.s[t.s.size()-1]-'0';
	else t.len=t.s[t.s.size()-1]-'0';
}


void getid(Ip& t)
{//对结构体中的ip数组赋值 
	int i,ans=0,curr=0;
	int count=0;
	for(i=0;i<t.s.size();i++)
	{
		if(t.s[i]=='/') 
		{
			break;
		}
		if(t.s[i]=='.') 
		{
			t.ip[count++]=curr;
			curr=0;
		}
		else 
		{
			curr=curr*10+t.s[i]-'0';
		}
	}
	t.ip[count++]=curr;
	while(count<4)
	{
		t.ip[count++]=0;
	}
}

bool cmp(Ip a,Ip b)
{//比较函数 
	if(a.ip[0]!=b.ip[0]) return a.ip[0]<b.ip[0];
	if(a.ip[1]!=b.ip[1]) return a.ip[1]<b.ip[1];
	if(a.ip[2]!=b.ip[2]) return a.ip[2]<b.ip[2];
	if(a.ip[3]!=b.ip[3]) return a.ip[3]<b.ip[3];
	return a.len<b.len;
}
void merge1(Ip *t,int n,int *del)
{//第一次合并 
	int i=0,j=1;
	while(i<=n-1&&del[i])i++;
	while(j<=n-1&&del[j])j++;
	while(j<=n-1)
	{
		if(t[i].len<=t[j].len)
		{
			ll ip1=(t[i].ip[0]<<24)+(t[i].ip[1]<<16)+(t[i].ip[2]<<8)+t[i].ip[3];
			ip1=ip1>>(32-t[i].len);
			ll ip2=(t[j].ip[0]<<24)+(t[j].ip[1]<<16)+(t[j].ip[2]<<8)+t[j].ip[3];
			ip2=ip2>>(32-t[i].len);
			if(ip1==ip2)
				del[j++]=1;
			else{
				i++;
				while(i<=n-1&&del[i]) i++;
				j++;
				while(j<=n-1&&del[j]) j++;
			} 
		}
		else {
			i++;
			while(i<=n-1&&del[i]) i++;
			j++;
			while(j<=n-1&&del[j]) j++;
		}
	}
}
void merge2(Ip *t,int n,int *del)
{//第二次合并 
	int i=0,j=1;
	while(i<=n-1&&del[i])i++;
	while(j<=n-1&&del[j])j++;
	while(j<=n-1)
	{
		if(t[i].len==t[j].len)
		{
			ll ip1=(t[i].ip[0]<<24)+(t[i].ip[1]<<16)+(t[i].ip[2]<<8)+t[i].ip[3];
			ip1=ip1>>(33-t[i].len);
			ll ip2=(t[j].ip[0]<<24)+(t[j].ip[1]<<16)+(t[j].ip[2]<<8)+t[j].ip[3];
			ip2=ip2>>(33-t[i].len);
			if(ip1==ip2)
			{
				if(t[i].len<10)
					t[i].s=t[i].s.substr(0,t[i].s.size()-1)+to_string(t[i].len-1);
				else
					t[i].s=t[i].s.substr(0,t[i].s.size()-2)+to_string(t[i].len-1);
				if(i!=0){
				t[i--].len--;
				del[j]=1;
				j=i+1;
				while(i>=0&&del[i]) i--;}
				else{
					t[i].len--;
					del[j++]=1;
					while(j<=n-1&&del[j])j++;
				}
			}
			else{
				i++;
				while(i<=n-1&&del[i]) i++;
				j++;
				while(j<=n-1&&del[j]) j++;
			}
		}
		else{
			i++;
			while(i<=n-1&&del[i]) i++;
			j++;
			while(j<=n-1&&del[j]) j++;	
		}
	}
}

int main()
{
	int n;
	cin>>n;
	Ip preip[n];
	int del[n];
	for(int i=0;i<n;i++)
	{
		cin>>preip[i].s;
		ini(preip[i]);
		getid(preip[i]);
		inilen(preip[i]);
	}
	sort(preip,preip+n,cmp);
	for(int k=0;k<n;k++)
		del[k]=0;
	merge1(preip,n,del);
	merge2(preip,n,del);
	for(int i=0;i<n;i++)
	{
		if(!del[i])//没有被删除的项 
		cout<<preip[i].s<<endl;
	}
	return 0;	
}
