#include<bits/stdc++.h>
using namespace std;
//参考博客https://blog.csdn.net/tigerisland45/article/details/60084015

typedef long long ll;
ll inf=1e18;
const int N=10001;

bool reach[N];
ll dis[N];
ll cost[N];
struct _node
{
	int u;
	int dis;
	_node(int a=0,int b=0){
		u=a;dis=b;
	}
	friend bool operator<(_node a,_node b){
		return a.dis>b.dis;
	}
		
};
struct _edge
{
	int u;
	int w;
	_edge(int a=0,int b=0){
		u=a;w=b;
	}
};
vector<_edge> g[N];
ll dijikstra(int s,int n)
{//使用优先级队列的dijikstra
	for(int i=1;i<=n;i++)
	{
		reach[i]=false;
		dis[i]=inf;
	}
	dis[s]=0;
	priority_queue<_node> q;
	q.push(_node(s,0));
	while(!q.empty())
	{
		_node x=q.top();
		q.pop();
		if(reach[x.u])
			continue;
		reach[x.u]=true;
		for(int i=0;i<g[x.u].size();i++)
		{
			int p=g[x.u][i].u;
			if(reach[p]) continue;
			if(dis[p]>dis[x.u]+g[x.u][i].w)
			{
				dis[p]=dis[x.u]+g[x.u][i].w;
				cost[p]=g[x.u][i].w;
				q.push(_node(p,dis[p]));
			}
			else if(dis[p]==dis[x.u]+g[x.u][i].w)
				if(cost[p]>g[x.u][i].w)
					cost[p]=g[x.u][i].w;
		}
	}
	ll ans=0;
	for(int i=2;i<=n;i++)
		ans+=cost[i];
	return ans;
}

int main()
{
	int n,m;
	cin>>n>>m;
	int u,v,w;
	for(int i=0;i<m;i++)
	{
		cin>>u>>v>>w;
		g[u].push_back(_edge(v,w));//邻接表
		g[v].push_back(_edge(u,w));
	}
	ll ans=dijikstra(1,n);
	cout<<ans;
	return 0;
}
