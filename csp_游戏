#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N=101;
//参考博客https://blog.csdn.net/tigerisland45/article/details/54934916
bool reach[N][N][305];

struct _node
{
	int r;
	int c;
	int from_r;
	int from_c;
	ll curr;
	_node(int a=0,int b=0,int cc=0,int d=0,ll e=0)
	{
		r=a;c=b;from_r=cc;from_c=d;curr=e;
	}
};
ll bfs(int n,int m)
{
	int r=1,c=1,t=0;
	ll ans=0;
	
	queue<_node> q;
	reach[1][1][0]=true;
	q.push(_node(1,1,1,1,0));
	_node last=_node(1,1,1,1,0);
	while(!q.empty())
	{
		
		_node x=q.front();
		t=x.curr;
		q.pop();
		if(x.r==n&&x.c==m) return x.curr;
		if(x.r<n)
		{ 
			if(!reach[x.r+1][x.c][t+1])
			{
				q.push(_node(x.r+1,x.c,x.r,x.c,x.curr+1));
				reach[x.r+1][x.c][t+1]=true;
			}
		}
		if(x.c<m) 
		{
			if(!reach[x.r][x.c+1][t+1])
			{
				q.push(_node(x.r,x.c+1,x.r,x.c,x.curr+1));
				reach[x.r][x.c+1][t+1]=true;
			}
		}
		if(x.r>1)
		{
			if(!reach[x.r-1][x.c][t+1])
			{
				q.push(_node(x.r-1,x.c,x.r,x.c,x.curr+1));
				reach[x.r-1][x.c][t+1]=true;
			}
		}
		if(x.c>1)
		{
			if(!reach[x.r][x.c-1][t+1])
			{
				q.push(_node(x.r,x.c-1,x.r,x.c,x.curr+1));
				reach[x.r][x.c-1][t+1]=true;
			}
		}
	}
}

int main()
{
	//freopen("c.in","r",stdin);
	int n,m,t;
	cin>>n>>m>>t;
	int r,c,a,b;

	for(int i=1;i<=n;i++)
		for(int j=1;j<=m;j++)
			for(int k=0;k<=305;k++)
			reach[i][j][k]=false;
			
	for(int i=0;i<t;i++)
	{
		cin>>r>>c>>a>>b;
		for(int x=a;x<=b;x++)
			reach[r][c][x]=true;
	}
	ll ans=bfs(n,m);
	cout<<ans;
	return 0;
}
