#include<bits/stdc++.h>
using namespace std;

typedef long long ll;

bool g[10001][10001];
int vis[10001];
vector<int> li[10001];
int d[10001];
int cnt_dfs=0;
int n,m;
stack<int> st;
void dfs(int s)
{
	vis[s]=1;
	cnt_dfs++;
	for(auto i:li[s])
	{
		if(vis[i]==0)
			dfs(i);
	}
	return ;
}

int main()
{
	
	cin>>n>>m;
	memset(g,0,sizeof(g));
	memset(vis,0,sizeof(vis));
	memset(d,0,sizeof(d));
	for(int i=0;i<m;i++)
	{
		int x,y;
		scanf("%d%d",&x,&y);
		li[x].push_back(y);
		li[y].push_back(x);
		d[x]++;
		d[y]++;
	}
	//
	for(int i=1;i<=n;i++)
		sort(li[i].begin(),li[i].end());
	dfs(1);
	
	if(cnt_dfs!=n){
		cout<<-1;
		return 0;
	}
	int ji_cnt=0;
	for(int i=1;i<=n;i++)
		if(d[i]&1) ji_cnt++;
	if(ji_cnt!=0&&ji_cnt!=2)
	{
		cout<<-1;
		return 0;
	}
	if(ji_cnt==2&&d[1]&1==0) 
	{
		cout<<-1;
		return 0;
	}
	
	//递归的dfs会爆栈，用非递归的dfs 
	stack<int> ds;
	ds.push(1);
	while(!ds.empty())
	{
		int curr=ds.top(),i;
		for(i=0;i<li[curr].size();i++)
		{
			int j=li[curr][i];
			if(g[curr][j]==0)
			{
				ds.push(j);
				g[curr][j]=g[j][curr]=1;
				break;
			}
		}
		if(i==li[curr].size())
		{
			st.push(curr);
			ds.pop();
		}
	}
	
	while(!st.empty())
	{
		cout<<st.top()<<" ";
		st.pop();
	}
	return 0;
}
